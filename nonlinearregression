import numpy as np
import pandas as pd

#Download dataset: 2 columns:
#1st column: a year between 1960 and 2014
#2nd column: China's corresponding annual gross domestic income in US dollars for that year
!wget -nv -O china_gdp.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/china_gdp.csv
  
df = pd.read_csv("china_gdp.csv")
df.head(10)

x_data, y_data = (df["Year"].values, df["Value"].values)

#Building the model
def sigmoid(x, Beta_1, Beta_2):
    y = 1 / (1 + np.exp(-Beta_1*(x - Beta_2)))
    return y_data

#Find the best parameters for our fit line
#Normalize x and y from the data
xdata =x_data/max(x_data)
ydata =y_data/max(y_data)

from scipy.optimize import curve_fit
#Optimization
poptz, pcovz = curve_fit(sigmoid, xdata, ydata) #add those reasonable bounds to get the cov matrix
#print the final parameters

#Train/test split
msk = np.random.rand(len(df)) < 0.8
train_x = xdata[msk]
test_x = xdata[~msk]
train_y = ydata[msk]
test_y = ydata[~msk]

# build the model using train set
#p0 = [max(train_x), np.median(train_x),1,min(train_y)] # this is an mandatory initial guess
#popt, pcov = curve_fit(sigmoid, train_x, train_y, p0, method='dogbox')
popt, pcov = curve_fit(sigmoid, train_x, train_y)

print(" beta_1 = %f, beta_2 = %f" % (popt[0], popt[1]))
#predict using test set
y_hat = sigmoid(test_x, *popt)

# evaluation
print("Mean absolute error: %.2f" % np.mean(np.absolute(y_hat - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((y_hat - test_y) ** 2))
from sklearn.metrics import r2_score
print("R2-score: %.2f" % r2_score(y_hat , test_y))
